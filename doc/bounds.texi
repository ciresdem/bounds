\input texinfo  @c -*-Texinfo-*-
@c To compile: makeinfo  -I . bounds.texi -o bounds.info

@setfilename bounds.info
@settitle bounds Manual
@footnotestyle end

@ifinfo
@dircategory Geographic Information Systems
@direntry
* bounds: (bounds).	A boundary generation utility.
@end direntry

This is @cite{The bounds Manual}, for bounds.

Copyright 2011 - 2013, 2016 - 2021 Matthew Love.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
@end ifinfo

@titlepage
@title bounds
@subtitle Generate a boundary of xyz data
@subtitle Manual
@author Matthew Love
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2011 - 2013, 2016 - 2021 Matthew Love.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
@end titlepage

@node Top, Copying, (dir), (dir)

@ifnottex
This document describes the program @code{bounds}.

@end ifnottex

@menu
* Copying::                     Distribution conditions
* Introduction::                Brief introduction to bounds

* Using bounds::                Using bounds
* Examples::                    Examples
@end menu

@node Copying, Introduction, Top, Top
@chapter Copying
@cindex Copying

bounds is copyright (C) 2011 - 2013, 2016 - 2021 Matthew Love. Matthew Love and is released under the
terms of the GNU General Public License. See the included file
@file{COPYING} for the full text of the license (or @pxref{Copying, ,
Copying, emacs, The GNU Emacs Manual}).

@quotation
This is free software -- you are welcome to redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2, or
(at your option) any later version.

bounds is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
@end quotation

@node Introduction, Using bounds, Copying, Top
@chapter Introduction
@cindex Introduction

Bounds makes available a number of methods for discovering the boundary of a set of xy points.

A number of boundary methods are available for use:

@itemize

@item Bounding Box
@item Convex Hull
@item Convave Hull
@item Bounding Block

@end itemize

Bounds provides a command-line program @code{bounds} as well as a C library for development using the @code{bounds.h} header file.

@node Using bounds, Examples, Introduction, Top
@chapter Using bounds
@cindex Using bounds
@cindex bounds, using

bounds is a command-line program for the GNU operating system designed to be run in a shell program such as bash.

For general usage help from the command-line, the @code{--help} swich can be used. 

@verbatim
~] bounds --help

bounds infile [Options]

  Generate a boundary of the given xy point file(s) and print results 
  to stdout. Optionally, choose between different algorithms to use to 
  generate the boundary. The default behavior will generate a convex hull 
  boundary. 

  infile		The input point file.

 Options:
  -d, --delimiter	The input xy file record delimiter
     Note: The default will assume a space (" ") is the delimiter.
  -r, --record		The input record order, 'xy' should represent the locations
              		of the x and y records, respectively.
     Note: The default will assume the record begins with 'xy'. If the x and 
           y records are located elsewhere, fill in records with any letter. i.e.
           `-r zyx` for data where the record is `elevation,y-value,x-value`.
  -s, --skip		Skip header lines in the input xy file; specify the number of lines
            		to skip here.

  -b, --box		Generate a 'bounding box' boundary. 
  -k, --block		Generate a 'block' boundary. 
             		Specify the blocking increment here. (e.g. --block 0.001)
     Note: The blocking increment should be in the same units as the input xy data.
  -x, --convex		Generate a 'convex hull' boundary using a monotone chain algorithm. (Default)
  -v, --concave		Generate a 'concave hull' boundary using a distance weighted 
               		package wrap algorithm. 
               		Specify the distance threshold used in generating the concave 
               		hull as an argument here. (e.g. --concave 0.01)
     Note: The distance threshold should be in the same units as the input xy data.

  --help		Print this help menu and exit.
  --version		Print version information and exit.

@end verbatim

@itemize @bullet
@item The @code{-d, --delimiter} switch sets the delimiter of the input xy data.
@item The @code{-r, --record} switch set the order of xy* data columns.
@item The @code{-s, --skip} switch sets the number of header lines to skip before reading in data.
@item The @code{-b, --box} switch sets boundary algorithm to @code{bounding box}.
@item The @code{-k, --block} switch sets boundary algorithm to @code{bounding block}.
@item The @code{-x, --convex} switch sets boundary algorithm to @code{convex hull}
@item The @code{-v, --concave} switch sets boundary algorithm to @code{concave hull}
@end itemize

@node Examples, ,Using bounds, Top
@chapter Examples
@cindex Examples

@itemize @bullet
@item Generate a bounding box of the input xyz data in input.xyz

@verbatim
~] bounds -b input.xyz
@end verbatim

@item Generate a bounding block boundary from the yxz data in input.yxz using blocking paremter of 0.001 degrees and output the boundary to a .gmt file.

@verbatim
~] bounds -r yxz -k 0.001 input.yxz > output.gmt
@end verbatim
@end itemize

@contents
@bye
